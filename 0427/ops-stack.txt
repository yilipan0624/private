import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { Duration } from 'aws-cdk-lib';
import * as backup from 'aws-cdk-lib/aws-backup';
import { Schedule } from 'aws-cdk-lib/aws-events';
import { NamingStackProps } from '../../utils/commonTypes';
import { ResourceNameBuilder } from '../../utils/helpers';

type WccOpsStackProps = {
  namingStackProps: NamingStackProps;
  backupVaultName?: string;
  backupPlanName?: string;
  dailyBackupHour?: number;
  dailyBackupMinute?: number;
  destinationBackupVaultArn: string;
} & cdk.StackProps;

export class WccOpsStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props: WccOpsStackProps) {
    super(scope, id);

    const destinationRegion = 'ap-northeast-3';

    const backupVault = new backup.BackupVault(this, 'MyBackupVault', {
      backupVaultName: ResourceNameBuilder.makeResourceNameStr({
        serviceName: 'backup',
        use: `tokyovault`,
        ...props.namingStackProps,
      }),
    });

const commonCopyAction: backup.CfnBackupPlan.CopyActionResourceTypeProperty = {
  destinationBackupVaultArn: props.destinationBackupVaultArn,
  lifecycle: {
    deleteAfterDays: 20,
  },
};



const backupPlanec2windows = new backup.CfnBackupPlan(this, 'plan1', {
  backupPlan: {
    backupPlanName: ResourceNameBuilder.makeResourceNameStr({
      serviceName: 'backup',
      use: `plan`,
      ...props.namingStackProps,
    }),
    backupPlanRule: [
      {
        ruleName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'rule',
          use: `ec2rule`,
          ...props.namingStackProps,
        }),
        scheduleExpression: 'cron(0 15 * * ? *)',
        startWindowMinutes: Duration.hours(1).toMinutes(),
        completionWindowMinutes: Duration.hours(6).toMinutes(),
        lifecycle: {
          deleteAfterDays: 20,
        },
        copyActions: [commonCopyAction],
        targetBackupVault: backupVault.backupVaultName,
      } as backup.CfnBackupPlan.BackupRuleResourceTypeProperty,
    ],
  },
});

const backupPlanec2linux = new backup.CfnBackupPlan(this, 'plan2', {
  backupPlan: {
    backupPlanName: ResourceNameBuilder.makeResourceNameStr({
      serviceName: 'backup',
      use: `plan`,
      ...props.namingStackProps,
    }),
    backupPlanRule: [
      {
        ruleName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'rule',
          use: `ec2rule`,
          ...props.namingStackProps,
        }),
        scheduleExpression: 'cron(0 15 * * ? *)',
        startWindowMinutes: Duration.hours(1).toMinutes(),
        completionWindowMinutes: Duration.hours(6).toMinutes(),
        lifecycle: {
          deleteAfterDays: 20,
        },
        copyActions: [commonCopyAction],
        targetBackupVault: backupVault.backupVaultName,
      } as backup.CfnBackupPlan.BackupRuleResourceTypeProperty,
    ],
  },
});


     const windowsBackupSelection = new backup.CfnBackupSelection(this, 'WindowsBackupSelection', {
      backupPlanId: backupPlanec2windows.ref,
      backupSelection: {
        selectionName: 'ec2-windows',
        iamRoleArn: `arn:aws:iam::${cdk.Stack.of(this).account}:role/service-role/AWSBackupDefaultServiceRole`, // Default role ARN
        resources: [
          `arn:aws:ec2:*:*:instance/*`,
        ],
        listOfTags: [
          {
            conditionType: 'STRINGEQUALS',
            conditionKey: 'Name',
            conditionValue: 'cpi-ec2-ps-dev-iwel-01',
          },
        ],
      },
    });

    const linuxBackupSelection = new backup.CfnBackupSelection(this, 'LinuxBackupSelection', {
      backupPlanId: backupPlanec2linux.ref,
      backupSelection: {
        selectionName: 'ec2-linux',
        iamRoleArn: `arn:aws:iam::${cdk.Stack.of(this).account}:role/service-role/AWSBackupDefaultServiceRole`,
        resources: [`arn:aws:ec2:*:*:instance/*`],
        listOfTags: [
          {
            conditionType: 'STRINGEQUALS',
            conditionKey: 'Name',
            conditionValue: 'cpi-ec2-ps-dev-iwel-02',
          },
        ],
      },
    });
  }
}

