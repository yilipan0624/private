import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as fsx from 'aws-cdk-lib/aws-fsx';
import { Construct } from 'constructs';
import { ADConstruct } from '../../construct/ad/ad-construct';
import { NamingStackProps } from '../../../utils/commonTypes';
import { ResourceNameBuilder } from '../../../utils/helpers';



type FSxConstructProps = {
  vpc: ec2.IVpc;
  privateSubnets: ec2.ISubnet[];
  directoryService: ADConstruct;
  namingStackProps: NamingStackProps;
  fsxName?: string;
};

export class FSxConstruct extends Construct {
  public readonly fileSystem: fsx.CfnFileSystem;

  constructor(scope: Construct, id: string, props: FSxConstructProps) {
    super(scope, id);
    
    // Create SecurityGroup
    const fsxSecurityGroupName = ResourceNameBuilder.makeResourceNameStr({
      serviceName: 'fsx',
      use: 'securityGroup',
      ...props.namingStackProps,
    });

    const fsxSecurityGroup = new ec2.SecurityGroup(this, 'fsxSecurityGroup', {
      vpc: props.vpc,
      securityGroupName: fsxSecurityGroupName,
      description: 'Security group for FSx',
    });
    cdk.Tags.of(fsxSecurityGroup).add('Name', fsxSecurityGroupName);

    // Add inbound rule
    fsxSecurityGroup.addIngressRule(ec2.Peer.ipv4(props.vpc.vpcCidrBlock), ec2.Port.tcp(445), 'Allow FSx traffic');

    // Create FSx for Windows
    const fsxFileSystemName = ResourceNameBuilder.makeResourceNameStr({
      serviceName: 'fsx',
      use: 'fileSystem',
      ...props.namingStackProps,
    });
    

// Create the FSx for Windows File Server
this.fileSystem = new fsx.CfnFileSystem(this, 'FsxWindowsFileSystem', {
  fileSystemType: 'WINDOWS',
  subnetIds: [
    props.privateSubnets[0].subnetId,
    props.privateSubnets[1].subnetId,
  ], // Provide both subnets
  securityGroupIds: [fsxSecurityGroup.securityGroupId],
  storageType: 'HDD',
  storageCapacity: 5120,
  windowsConfiguration: {
    activeDirectoryId: props.directoryService.directoryService.ref,
    throughputCapacity: 64, // 8 MB/s is the minimum throughput capacity for HDD storage type

    deploymentType: 'MULTI_AZ_1', // Change to MULTI_AZ deployment
    preferredSubnetId: props.privateSubnets[0].subnetId, // Choose the first subnet as preferred
    automaticBackupRetentionDays: 0, // Disable automatic backups
    auditLogConfiguration: {
      fileAccessAuditLogLevel: 'SUCCESS_AND_FAILURE',
      fileShareAccessAuditLogLevel: 'SUCCESS_AND_FAILURE',
    },
  },
});

cdk.Tags.of(this.fileSystem).add('Name', fsxFileSystemName);

    
    // Output FSx DNS Name
    new cdk.CfnOutput(this, 'fsxDnsName', {
      value: this.fileSystem.attrDnsName,
      description: 'FSx for Windows File System DNS Name',
    });
  }
}
