import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as fsx from 'aws-cdk-lib/aws-fsx';
import { Construct } from 'constructs';
import { ADConstruct } from '../../construct/ad/ad-construct';
import { NamingStackProps } from '../../../utils/commonTypes';
import { ResourceNameBuilder } from '../../../utils/helpers';

export interface FsxConstructProps {
  vpc: ec2.Vpc;
  privateSubnets: ec2.ISubnet[];
  directoryService: ADConstruct;
  namingStackProps: NamingStackProps;
}

export class FsxConstruct extends Construct {
  constructor(scope: Construct, id: string, props: FsxConstructProps) {
    super(scope, id);

    // Create SecurityGroup
    const fsxSecurityGroupName = ResourceNameBuilder.makeResourceNameStr({
      serviceName: 'fsx',
      use: 'securityGroup',
      ...props.namingStackProps,
    });

    const fsxSecurityGroup = new ec2.SecurityGroup(this, 'fsxSecurityGroup', {
      vpc: props.vpc,
      securityGroupName: fsxSecurityGroupName,
      description: 'Security group for FSx',
    });
    cdk.Tags.of(fsxSecurityGroup).add('Name', fsxSecurityGroupName);

    // Add inbound rule
    fsxSecurityGroup.addIngressRule(ec2.Peer.ipv4(props.vpc.vpcCidrBlock), ec2.Port.tcp(445), 'Allow FSx traffic');

    // Create FSx for Windows
    const fsxFileSystemName = ResourceNameBuilder.makeResourceNameStr({
      serviceName: 'fsx',
      use: 'fileSystem',
      ...props.namingStackProps,
    });

    const fsxFileSystem = new fsx.CfnFileSystem(this, 'fsxFileSystem', {
      fileSystemType: 'WINDOWS',
      storageCapacity: 5120,
      subnetIds: [
        props.privateSubnets[0].subnetId,
        props.privateSubnets[1].subnetId, // 添加第二个子网 ID
      ],
      securityGroupIds: [fsxSecurityGroup.securityGroupId],
      windowsConfiguration: {
        activeDirectoryId: props.directoryService.directoryService.ref,
        throughputCapacity: 64,
        auditLogConfiguration: { // 添加日志审查功能
          fileAccessAuditLogLevel: 'INFORMATION',
          fileShareAccessAuditLogLevel: 'INFORMATION',
        },
        //automaticBackupRetentionDays: 7,
        //dailyAutomaticBackupStartTime: '01:00',
        //weeklyMaintenanceStartTime: '1:01:00',
        deploymentType: 'MULTI_AZ_1', // 更改为多 AZ 部署
        preferredSubnetId: props.privateSubnets[0].subnetId, // 选择首选子网
      },
    });

    // 添加 FSx 文件系统标签
    fsxFileSystem.addOverride('Properties.Tags', [
      {
        Key: 'Name',
        Value: fsxFileSystemName,
      },
    ]);
    
    fsxFileSystem.addOverride('Properties.WindowsConfiguration.StorageType', 'HDD');
    
    // Output FSx DNS Name
    new cdk.CfnOutput(this, 'fsxDnsName', {
      value: fsxFileSystem.attrDnsName,
      description: 'FSx for Windows File System DNS Name',
    });
  }
}
