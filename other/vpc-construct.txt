import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import { VpcPrivateSubnetConstruct } from './vpc-private-subnet-construct';
import { VpcPublicSubnetConstruct } from './vpc-public-subnet-construct';
import { VpcClientvpnSubnetConstruct } from './vpc-clientvpn-subnet-construct';
import { VpcSharedSubnetConstruct } from './vpc-shared-subnet-construct';
import { CfnNatGateway } from 'aws-cdk-lib/aws-ec2';
import { IBucket } from 'aws-cdk-lib/aws-s3';

export type VpcConstructProps = {
    vpcCidr: string;
    publicSubnets: PublicSubnetProps[],
    privateSubnets: PrivateSubnetProps[],
    sharedSubnets?: SharedSubnetProps[]; 
    clientvpnSubnets: ClientvpnSubnetProps[];
    vpcName?: string;
    igwName?: string;
}

export type AddS3FlowLogProps = {
    S3FlowLogName?: string;
    s3flowLogBucket: IBucket;
}

export type PublicSubnetProps = {
    subnetCidr: string;
    availabilityZone: string;
    subnetName?: string,
    routeTableName?: string,
    eipName?: string,
    natGatewayName?: string,
}

export type PrivateSubnetProps = {
    subnetCidr: string;
    availabilityZone: string;
    subnetName?: string,
    routeTableName?: string,
}

export type SharedSubnetProps = {
    subnetCidr: string;
    availabilityZone: string;
    subnetName?: string,
    routeTableName?: string,
}

export type ClientvpnSubnetProps = {
  subnetCidr: string;
  availabilityZone: string;
  subnetName?: string,
  routeTableName?: string,
};

export class VpcConstruct extends Construct {
    public readonly vpc: ec2.Vpc;
    public readonly publicSubnets: ec2.Subnet[];
    public readonly privateSubnets: ec2.Subnet[];
    public readonly sharedSubnets: ec2.Subnet[]; 
    public readonly clientvpnSubnets: ec2.Subnet[];
    readonly uniqueAZPrivateSubnets: ec2.ISubnet[];

    constructor(scope: Construct, id: string, props: VpcConstructProps) {
        super(scope, id);

        this.vpc = new ec2.Vpc(this, 'Vpc', {
            vpcName: props.vpcName,
            cidr: props.vpcCidr,
            subnetConfiguration: [],
            enableDnsHostnames: true,
            enableDnsSupport: true
        });
        if (props.vpcName) {
            cdk.Tags.of(this.vpc).add('Name', props.vpcName);
        }

        const igw = new ec2.CfnInternetGateway(this, 'Igw', {});
        if (props.igwName) {
            cdk.Tags.of(igw).add('Name', props.igwName);
        }
        new ec2.CfnVPCGatewayAttachment(this, 'IgwAtt', {
            vpcId: this.vpc.vpcId,
            internetGatewayId: igw.ref,
        });

        const publicSubnetList: ec2.Subnet[] = [];
        const natGwMap: Map<string, CfnNatGateway> = new Map<string, CfnNatGateway>();
        props.publicSubnets.forEach((v_, i_) => {
            const publicSubnetConstruct = new VpcPublicSubnetConstruct(this, 'PublicSubnet' + i_, {
                availabilityZone: v_.availabilityZone,
                cfnIgw: igw,
                vpc: this.vpc,
                subnetCidr: v_.subnetCidr,
                subnetName: v_.subnetName,
                routeTableName: v_.routeTableName,
                eipName: v_.eipName,
                natGatewayName: v_.natGatewayName,
            });
            publicSubnetList.push(publicSubnetConstruct.subnet);
            natGwMap.set(v_.availabilityZone, publicSubnetConstruct.natGateway);
        });
        this.publicSubnets = publicSubnetList;

        const privateSubnetList: ec2.Subnet[] = [];
        props.privateSubnets.forEach((v_, i_) => {
        if (!natGwMap.has(v_.availabilityZone)) {
            throw new Error('プライベートサブネットに対応するAZのNatGatewayがありません。');
        }
        const natGw = natGwMap.get(v_.availabilityZone) as ec2.CfnNatGateway;
        const privateSubnetConstruct = new VpcPrivateSubnetConstruct(this, 'PrivateSubnet' + i_, {
            availabilityZone: v_.availabilityZone,
            vpc: this.vpc,
            subnetCidr: v_.subnetCidr,
            subnetName: v_.subnetName,
            routeTableName: v_.routeTableName,
            cfnNatGateway: natGw
        });
            privateSubnetList.push(privateSubnetConstruct.subnet);
        });
        this.privateSubnets = privateSubnetList;
    
    
        const sharedSubnetList: ec2.Subnet[] = [];
        if (props.sharedSubnets) {
            props.sharedSubnets.forEach((v_, i_) => {
        const sharedSubnetConstruct = new VpcSharedSubnetConstruct(this, 'SharedSubnet' + i_, {
            availabilityZone: v_.availabilityZone,
            vpc: this.vpc,
            subnetCidr: v_.subnetCidr,
            subnetName: v_.subnetName,
            routeTableName: v_.routeTableName,
            cfnNatGateway: natGwMap.get(v_.availabilityZone) as ec2.CfnNatGateway,
        });
        sharedSubnetList.push(sharedSubnetConstruct.subnet);
            });
        }
        this.sharedSubnets = sharedSubnetList;
        
        const clientvpnSubnetList: ec2.Subnet[] = [];
        if (props.clientvpnSubnets) {
          props.clientvpnSubnets.forEach((v_, i_) => {
            if (!natGwMap.has(v_.availabilityZone)) {
              throw new Error('Client vpn 子网没有对应可用区的 NAT 网关。');
            }
            const natGw = natGwMap.get(v_.availabilityZone) as ec2.CfnNatGateway;
            const clientvpnSubnetConstruct = new VpcClientvpnSubnetConstruct(this, 'ClientvpnSubnet' + i_, {
              availabilityZone: v_.availabilityZone,
              vpc: this.vpc,
              subnetCidr: v_.subnetCidr,
              subnetName: v_.subnetName,
              routeTableName: v_.routeTableName,
              cfnNatGateway: natGw,
            });
            clientvpnSubnetList.push(clientvpnSubnetConstruct.subnet);
          });
        }
        this.clientvpnSubnets = clientvpnSubnetList;

    // Initialize uniqueAZPrivateSubnets
    this.uniqueAZPrivateSubnets = Array.from(
        new Set(privateSubnetList.map(subnet => subnet.availabilityZone))
    ).map(az => privateSubnetList.find(subnet => subnet.availabilityZone === az) as ec2.ISubnet);
}}
    
