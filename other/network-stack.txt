import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { NamingStackProps } from '../../utils/commonTypes';
import { ensureStr } from '../../utils/helpers';
import { ResourceNameBuilder } from '../../utils/helpers';
import { VpcConstruct, PrivateSubnetProps, PublicSubnetProps, SharedSubnetProps, ClientvpnSubnetProps } from '../construct/vpc/vpc-construct';
import { S3S3logBucketConstruct } from '../construct/s3/s3-s3log-bucket-construct';

type WccNetworkStackProps = {
  namingStackProps: NamingStackProps;
  vpcCidr: string;
  publicSubnetsInfo?: SubnetInfo[];
  privateSubnetsInfo?: SubnetInfo[];
  sharedSubnetsInfo?:SubnetInfo[];
  clientvpnSubnetsInfo?: SubnetInfo[]; // 添加 Client vpn 子网信息
  s3flowLogBucketArn?: string;
  /** datasync用IAMロール */
  dataSyncRoleArnList?: string[]
  /**
   * dataSyncクロスアカウントId
   * クロスアカウントでDatasyncする場合は必須
   */
  dataSyncCorssAccountId?: string
} & cdk.StackProps

type SubnetInfo = {
  subnetCidr: string;
  availabilityZone: string;
}


export class WccNetworkStack extends cdk.Stack {
  public readonly vpc: VpcConstruct;
  public readonly s3AccessLogBucket: S3S3logBucketConstruct;

  constructor(scope: Construct, id: string, props: WccNetworkStackProps) {
    super(scope, id, props);



    // パブリックサブネットリスト
    const publicSubnetsList: PublicSubnetProps[] = [];
    props.publicSubnetsInfo?.forEach(v_ => {
      const azCode = ensureStr(v_, 'availabilityZone').slice(-1);
      publicSubnetsList.push({
        subnetCidr: v_.subnetCidr,
        availabilityZone: v_.availabilityZone,
        routeTableName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'rtb',
          use: `public-${azCode}`,
          ...props.namingStackProps
        }),
        subnetName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'subnet',
          use: `public-${azCode}`,
          ...props.namingStackProps
        }),
        eipName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'eip',
          use: `${azCode}`,
          ...props.namingStackProps
        }),
        natGatewayName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'nat',
          use: `${azCode}`,
          ...props.namingStackProps
        }),
      });
    });

    // プライベートサブネットリスト
    const privateSubnetsList: PrivateSubnetProps[] = [];
    props.privateSubnetsInfo?.forEach(v_ => {
      const azCode = ensureStr(v_, 'availabilityZone').slice(-1);
      privateSubnetsList.push({
        subnetCidr: v_.subnetCidr,
        availabilityZone: v_.availabilityZone,
        routeTableName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'rtb',
          use: `private-${azCode}`,
          ...props.namingStackProps
        }),
        subnetName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'subnet',
          use: `private-${azCode}`,
          ...props.namingStackProps
        }),
      });
    });

    // Shared Subnet 列表
    const sharedSubnetsList: SharedSubnetProps[] = [];
    props.sharedSubnetsInfo?.forEach(v_ => {
      const azCode = ensureStr(v_, 'availabilityZone').slice(-1);
      sharedSubnetsList.push({
        subnetCidr: v_.subnetCidr,
        availabilityZone: v_.availabilityZone,
        subnetName: ResourceNameBuilder.makeResourceNameStr({
          serviceName: 'subnet',
          use: `shared-${azCode}`,
          ...props.namingStackProps,
        }),
        routeTableName: ResourceNameBuilder.makeResourceNameStr({ 
          serviceName: 'rtb',
          use: `shared-${azCode}`,
          ...props.namingStackProps,
        }),
      });
    });
    
// Client vpn Subnet 列表
const clientvpnSubnetsList: ClientvpnSubnetProps[] = [];
props.clientvpnSubnetsInfo?.forEach(v_ => {
  const azCode = ensureStr(v_, 'availabilityZone').slice(-1);
  clientvpnSubnetsList.push({
    subnetCidr: v_.subnetCidr,
    availabilityZone: v_.availabilityZone,
    subnetName: ResourceNameBuilder.makeResourceNameStr({
      serviceName: 'subnet',
      use: `clientvpn-${azCode}`,
      ...props.namingStackProps,
    }),
    routeTableName: ResourceNameBuilder.makeResourceNameStr({
      serviceName: 'rtb',
      use: `clientvpn-${azCode}`,
      ...props.namingStackProps,
    }),
  });
});
    
    // VPC作成
    this.vpc = new VpcConstruct(this, 'PsVpc', {
      vpcCidr: props.vpcCidr,
      publicSubnets: publicSubnetsList,
      privateSubnets: privateSubnetsList,
      sharedSubnets: sharedSubnetsList, 
      clientvpnSubnets: clientvpnSubnetsList, 
      vpcName: ResourceNameBuilder.makeResourceNameStr({
        serviceName: 'vpc',
        use: 'apne1',
        ...props.namingStackProps
      }),
      igwName: ResourceNameBuilder.makeResourceNameStr({
        serviceName: 'igw',
        ...props.namingStackProps
      })
    });


}}